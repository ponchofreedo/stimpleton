// bower:scss
// endbower


/*  Stimpleton - SCSS
    v0.0.1

*/


// imports
@import url(https://fonts.googleapis.com/css?family=Titillium+Web:200,200i,300,300i,400,400i,600,600i,700,700i,900&amp;subset=latin-ext);
@import "vendor/_meyer_reset";



// vars ---------------------------------------

// mq stuff
$break-small:         48rem;
$break-medium:        76.8rem;
$break-large:         96rem;
$break-super:         128rem;
$break-super-duper:   144rem;

// font family
$primary-font-family: 'Titillium Web', Helvetica, sans-serif;

// font-sizing
$text-sz-h-largest:   6.2rem;
$text-sz-h-larger:    4.8rem;
$text-sz-h-large:     3.2rem;
$text-sz-h-medium:    2.8rem;
$text-sz-h-small:     2.4rem;
$text-sz-body:        1.9rem;
$text-sz-baseline:    1.6rem;

// font-weights
$text-wt-extralight:  200;
$text-wt-light:       300;
$text-wt-regular:     400;
$text-wt-semibold:    600;
$text-wt-bold:        700;
$text-wt-black:       900;

// padding / margin helpers
$padding-base-value:  $text-sz-baseline;
$margin-base-value:   $text-sz-baseline;

// colors
$color-primary:       #48525c;
$color-secondary:     #708090;
$color-black:         #363636;
$color-white:         #ffffff;



// mixins -------------------------------------

// currently there seems to be a bug, mostly with webkit
// browsers, with using rem units in media queries, so
// these will use flat pixel values until I arrive at a
// resonable solution.

@mixin break($breakpoint) {
  @if $breakpoint == small {
    @media only screen and (max-width: 480px) { @content; }
  }
  @else if $breakpoint == medium {
    @media only screen and (max-width: 768px) { @content; }
  }
  @else if $breakpoint == large {
    @media only screen and (max-width: 960px) { @content; }
  }
  @else if $breakpoint == super {
    @media only screen and (max-width: 1280px) { @content; }
  }
  @else if $breakpoint == super-duper {
    @media only screen and (max-width: 1440px) { @content; }
  }
  @else if $breakpoint == mega {
    @media only screen and (min-width: 1441px) { @content; }
  }
  @else {
    @media only screen and ('#{$breakpoint}') { @content; }
  }
}

@mixin clearfix() {
  *zoom:1;
  &:before, &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
  @include break(break-small) {
    &:last-child {
      float: none;
    }
  }
}



// functions ----------------------------------

@function number-to-word($number){
  $word: "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve";
  @return nth($word, $number);
}
@function fraction-to-word($fraction){
  $word: "sixth", "third", "quarter", "half";
  @return nth($word, $fraction);
}



// base ---------------------------------------

* {
  box-sizing: border-box;
}

html, 
body {
  height: 100%;
  height: 100vh;
  margin: 0;
}

html {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  font-size: 62.5%;
}

body {
  font-family: $primary-font-family;
  font-size: $text-sz-baseline;           // 16px
  line-height: 1.4;
}



// type ---------------------------------------

h1,
h2,
h3,
h4,
h5,
h6,
p {
  vertical-align: baseline;

  i {
    font-style: italic;
  }
}

h1 {
  font-size: $text-sz-h-largest;
  font-weight: $text-wt-bold;
}

h2 {
  font-size: $text-sz-h-larger;
  font-weight: $text-wt-semibold;
}

h3 {
  font-size: $text-sz-h-large;
  font-weight: $text-wt-semibold;
}

h4 {
  font-size: $text-sz-h-medium;
}

h5 {
  font-size: $text-sz-h-small;
}

h6 {
  font-size: $text-sz-baseline;
  font-weight: $text-wt-bold;
}

p {
  font-size: $text-sz-body;
  font-weight: $text-wt-regular;
  line-height: 1.6;
  
  + p {
    margin-top: 0.8rem;
  }
}



// grid ---------------------------------------

.container {
  margin: 0 auto;
  padding: 0 $padding-base-value;

  &.max {
    max-width: $break-super-duper;
  }

  &.responsive {
    max-width: 100%;
  }
}
