/*  
    Stimpleton - SCSS / v0.0.1
    Copyright 2017, Zach Freed
    Free usage under MIT License
    http://www.opensource.org/licenses/mit-license.php
*/

// imports
@import url(https://fonts.googleapis.com/css?family=Titillium+Web:200,200i,300,300i,400,400i,600,600i,700,700i,900&amp;subset=latin-ext);
@import "vendor/_meyer_reset";

// vars ---------------------------------------

// mq stuff
$break-small:         48rem;
$break-medium:        76.8rem;
$break-large:         96rem;
$break-super:         128rem;
$break-super-duper:   144rem;

// font family
$primary-font-family: 'Titillium Web', Helvetica, sans-serif;

// font-sizing
$text-sz-h-largest:   6.2rem;
$text-sz-h-larger:    4.8rem;
$text-sz-h-large:     3.2rem;
$text-sz-h-medium:    2.8rem;
$text-sz-h-small:     2.4rem;
$text-sz-body:        1.9rem;
$text-sz-baseline:    1.6rem !default;

// font-weights
$text-wt-extralight:  200;
$text-wt-light:       300;
$text-wt-regular:     400;
$text-wt-semibold:    600;
$text-wt-bold:        700;
$text-wt-black:       900;

// padding / margin helpers
$padding-base-value:  $text-sz-baseline;
$margin-base-value:   $text-sz-baseline;

// colors
$color-primary:       #48525c;
$color-secondary:     #cfd2de;
$color-black:         #363636;
$color-white:         #ffffff;

// grid variables 
$num-cols: 12;
$grid-formula: 100% / $num-cols;
$column-list: (
  one: 1,
  two: 2,
  three: 3,
  four: 4,
  five: 5,
  six: 6,
  seven: 7,
  eight: 8,
  nine: 9,
  ten: 10,
  eleven: 11,
  twelve: 12
);
$fraction-list: (
  sixth: 2,
  quarter: 3,
  third: 4,
  half: 6,
  full: 12
);


// mixins -------------------------------------

// currently there seems to be a bug, mostly with webkit
// browsers, with using rem units in media queries, so
// these will use flat pixel values until I arrive at a
// resonable solution.

@mixin break($breakpoint) {
  @if $breakpoint == small {
    @media only screen and (max-width: 480px) { @content; }
  }
  @else if $breakpoint == medium {
    @media only screen and (max-width: 768px) { @content; }
  }
  @else if $breakpoint == large {
    @media only screen and (max-width: 960px) { @content; }
  }
  @else if $breakpoint == super {
    @media only screen and (max-width: 1280px) { @content; }
  }
  @else if $breakpoint == super-duper {
    @media only screen and (max-width: 1440px) { @content; }
  }
  @else if $breakpoint == mega {
    @media only screen and (min-width: 1441px) { @content; }
  }
  @else {
    @media only screen and ('#{$breakpoint}') { @content; }
  }
}

@mixin clearfix {
  *zoom:1;
  &:before, &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
  @include break(break-small) {
    &:last-child {
      float: none;
    }
  }
}

// functions ----------------------------------

// base ---------------------------------------

* {
  box-sizing: border-box;
}

html, 
body {
  height: 100%;
  height: 100vh;
  margin: 0;
}

html {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  font-size: 62.5%;
}

body {
  font-family: $primary-font-family;
  font-size: $text-sz-baseline;           // 16px
  line-height: 1.4;
  color: $color-primary;
}

// type ---------------------------------------

h1,
h2,
h3,
h4,
h5,
h6,
p {
  vertical-align: baseline;

  i {
    font-style: italic;
  }
}

h1 {
  font-size: $text-sz-h-largest;
  font-weight: $text-wt-bold;
}

h2 {
  font-size: $text-sz-h-larger;
  font-weight: $text-wt-semibold;
}

h3 {
  font-size: $text-sz-h-large;
  font-weight: $text-wt-semibold;
}

h4 {
  font-size: $text-sz-h-medium;
}

h5 {
  font-size: $text-sz-h-small;
}

h6 {
  font-size: $text-sz-baseline;
  font-weight: $text-wt-bold;
}

p {
  font-size: $text-sz-body;
  font-weight: $text-wt-regular;
  line-height: 1.6;
  
  + p {
    margin-top: 0.8rem;
  }
}

// grid ---------------------------------------

.container {
  margin-left: auto;
  margin-right: auto;
  padding: 0 $padding-base-value * 1;
  box-sizing: border-box;

  &.adaptive {
    max-width: $break-super-duper;
  }

  &.responsive {
    max-width: 100%;
  }

  &.no-gutter {
    padding-left: 0;
    padding-right: 0;
  }
}

.grid-row {
  width: 100%;
  position: relative;
  @include clearfix;
}

.grid > [class*="stretch-"] {
  float: left;
  padding-left: $padding-base-value * 1;
  padding-right: $padding-base-value * 1;
  display: inline-block;
  
  ~ [class*="stretch-"] {
    display: inline-block;
  }

  &.lefty {
    margin-left: 0;   // for safety
    float: left;
  }

  &.righty {
    float: right;
  }
}

// grid classes - columns
@each $column, $columns in $column-list  {
  .stretch-#{$column} {
    width: ($columns / $num-cols) * 100%;
  }
}

// grid classes - fractional
// a more semantic nomenclature for simpler applications
@each $fractional, $fraction in $fraction-list  {
  .stretch-#{$fractional} {
    width: ($fraction / $num-cols) * 100%;
  }
}

// push classes
@each $column, $columns in $column-list  {
  .push-#{$column} {
    margin-left: ($columns / ($num-cols) * 100%);
  }
}

// pull classes
@each $column, $columns in $column-list  {
  .pull-#{$column} {
    margin-right: ($columns / ($num-cols) * 100%);
  }
}

// pad-left classes
@each $column, $columns in $column-list  {
  .pad-l-#{$column} {
    padding-left: ($columns / ($num-cols) * 100%);
  }
}

// pad-right classes
@each $column, $columns in $column-list  {
  .pad-r-#{$column} {
    padding-right: ($columns / ($num-cols) * 100%);
  }
}

@include break(medium) {
  .grid {
    > [class*="stretch-"],
      [class*="stretch-"] {
      width: 100%;
      padding-left: 0;
      padding-right: 0;
    }
    > [class*="push-"],
      [class*="push-"] {
      margin-left: 0;
    }
    > [class*="pull-"],
      [class*="pull-"] {
      margin-right: 0;
    }
    > [class*="pad-l-"],
      [class*="pad-l-"] {
      padding-left: 0;
    }
    > [class*="pad-r-"],
      [class*="pad-r-"] {
      padding-right: 0;
    }
    > [class*="stretch-"] {
      &:first-of-type {
        padding-right: 0;
      }
      &:last-of-type {
        padding-left: 0;
      }
    }
  }
  .no-gutter {
    .grid > [class*="stretch-"] {
      padding-left: $padding-base-value * 1;
      padding-right: $padding-base-value * 1;
    }
  }
}

// demo, transfer to another file later
$stimpleton-color-green: #00D7AF;
$stimpleton-color-purple: #672894;
$stimpleton-color-gray: #9BA3AA;
$stimpleton-color-dark-gray: #48525C;
$stimpleton-color-light-gray: #CFD2DE;
$stimpleton-color-black: #404040;
$stimpleton-color-white: #ffffff;
$stimpleton-border-radius: 0.4rem;

.demo {
  
  & + .demo {
    margin-top: $margin-base-value * 1;
  }

  span {
    display: block;
    background-color: transparent;
    text-align: center;
    border-radius: $stimpleton-border-radius;
    border: $stimpleton-border-radius solid $stimpleton-color-light-gray;
    padding-top: $padding-base-value;
    padding-bottom: $padding-base-value;
    transition: all 0.16s ease;
    color: $stimpleton-color-dark-gray;

    &:hover {
      border-color: $stimpleton-color-green;
      background-color: $stimpleton-color-green;
      color: $stimpleton-color-white;
      font-weight: $text-wt-bold;
    }
  }
}
